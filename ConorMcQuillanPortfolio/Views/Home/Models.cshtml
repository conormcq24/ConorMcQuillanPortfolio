@{
    ViewData["Title"] = "3D Models";
}
<div>
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>
    @await Html.PartialAsync("_pageCarousel", ViewData["Carousel"])
    <br />
    <div class="col-10 offset-1 col-md-8 offset-md-2 text-white p-3">
        <div class="row">
            <div class="col-10 offset-1 col-md-8 offset-md-2 text-white text-center p-3">
                <h5 class="mb-4">My Art</h5>
                <p>This is a collection of 3D models I've created for fun or for personal projects, its more of a hobby than a professional skill but I enjoy it and thought it would be fun to implement it into my portfolio web page</p>
            </div>
        </div>
        <div class="row">
            <div class="col-10 offset-1 col-md-6 offset-md-0 text-white mb-4">
                <div class="card bg-dark border border-white h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-warning fw-bolder tektur-font mb-0">Low Poly Truck</h5>
                        <model-viewer id="truck-model"
                                      alt="truck-model"
                                      src="/models/RedTruck.glb"
                                      cors-mode="anonymous"
                                      auto-rotate
                                      camera-controls
                                      shadow-intensity="1"
                                      environment-image="neutral"
                                      camera-orbit="180deg 75deg 105%"
                                      exposure="0.8"
                                      style="width: 100%; height: 200px; background-color: #212529;">
                        </model-viewer>
                        <p>This is a low poly truck I textured in block bench for a game idea I had, I am very happy with how it turned out</p>
                        <div class="mb-2 mt-auto">
                            <label for="truck-model-type" class="form-label">Truck Color:</label>
                            <select id="truck-model-type" class="form-select bg-dark text-white">
                                <option value="RedTruck">Red</option>
                                <option value="BlueTruck">Blue</option>
                                <option value="BabyBlueTruck">Baby Blue</option>
                                <option value="GreenTruck">Green</option>
                                <option value="DarkGreenTruck">Dark Green</option>
                                <option value="TealTruck">Teal</option>
                                <option value="YellowTruck">Yellow</option>
                                <option value="GoldTruck">Gold</option>
                                <option value="OrangeTruck">Orange</option>
                                <option value="PinkTruck">Pink</option>
                                <option value="PurpleTruck">Purple</option>
                                <option value="WhiteTruck">White</option>
                                <option value="BlackTruck">Black</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-10 offset-1 col-md-6 offset-md-0 text-white mb-4">
                <div class="card bg-dark border border-white h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-warning fw-bolder tektur-font mb-0">Modular Grass Blocks</h5>
                        <model-viewer id="grass-model"
                                      alt="grass blocks"
                                      src="/models/DayGrassBlocks.glb"
                                      cors-mode="anonymous"
                                      auto-rotate
                                      camera-controls
                                      shadow-intensity="1"
                                      environment-image="neutral"
                                      camera-orbit="180deg 75deg 105%"
                                      exposure="0.8"
                                      style="width: 100%; height: 200px; background-color: #212529;">
                        </model-viewer>
                        <p>This is a set of modular grass blocks which fit together. the idea with these blocks was that I'd be able to build a large video game map with just these grass blocks</p>
                        <button class="btn btn-primary mb-2 mt-auto" onclick="switchModel('grass-model', '/models/DayGrassBlocks.glb')">Day</button>
                        <button class="btn btn-primary mb-2" onclick="switchModel('grass-model', '/models/NoonGrassBlocks.glb')">Noon</button>
                        <button class="btn btn-primary mb-2" onclick="switchModel('grass-model', '/models/NightGrassBlocks.glb')">Night</button>
                    </div>
                </div>
            </div>
            <div class="col-10 offset-1 col-md-6 offset-md-0 text-white mb-4">
                <div class="card bg-dark border border-white h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-warning fw-bolder tektur-font mb-0">Modular Sand Blocks</h5>
                        <model-viewer id="sand-model"
                                      alt="sand blocks"
                                      src="/models/DaySandBlocks.glb"
                                      cors-mode="anonymous"
                                      auto-rotate
                                      camera-controls
                                      shadow-intensity="1"
                                      environment-image="neutral"
                                      camera-orbit="180deg 75deg 105%"
                                      exposure="0.8"
                                      style="width: 100%; height: 200px; background-color: #212529;">
                        </model-viewer>
                        <p>These sand blocks are designed to complement the grass blocks, allowing for desert and beach areas in map creation.</p>
                        <button class="btn btn-primary mb-2 mt-auto" onclick="switchModel('sand-model', '/models/DaySandBlocks.glb')">Day</button>
                        <button class="btn btn-primary mb-2" onclick="switchModel('sand-model', '/models/NoonSandBlocks.glb')">Noon</button>
                        <button class="btn btn-primary mb-2" onclick="switchModel('sand-model', '/models/NightSandBlocks.glb')">Night</button>
                    </div>
                </div>
            </div>
            <div class="col-10 offset-1 col-md-6 offset-md-0 text-white mb-4">
                <div class="card bg-dark border border-white h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-warning fw-bolder tektur-font mb-0">Minecraft Sink</h5>
                        <model-viewer id="sink-model"
                                      alt="sink model"
                                      src="/models/SinkOff.glb"
                                      cors-mode="anonymous"
                                      auto-rotate
                                      camera-controls
                                      shadow-intensity="1"
                                      environment-image="neutral"
                                      camera-orbit="180deg 75deg 105%"
                                      material-variant="oak"
                                      exposure="0.8"
                                      style="width: 100%; height: 200px; background-color: #212529;">
                        </model-viewer>
                        <p>This is the sink I made for my minecraft furniture mod, it uses two textures one of which is entirely grayscale so that I can overlay a color on it to simulate each of the 10 minecraft wood types</p>
                        <button class="btn btn-primary mb-2 mt-auto" onclick="switchModel('sink-model', '/models/SinkOff.glb')">Off</button>
                        <button class="btn btn-primary mb-2" onclick="switchModel('sink-model', '/models/SinkOn.glb')">On</button>
                        <div class="mb-2">
                            <label for="sink-model-color" class="form-label">Wood Type:</label>
                            <select id="sink-model-color" class="form-select bg-dark text-white">
                                <option value="acacia">Acacia</option>
                                <option value="birch">Birch</option>
                                <option value="cherry">Cherry</option>
                                <option value="crimson">Crimson</option>
                                <option value="dark_oak">Dark Oak</option>
                                <option value="jungle">Jungle</option>
                                <option value="mangrove">Mangrove</option>
                                <option value="oak">Oak</option>
                                <option value="spruce">Spruce</option>
                                <option value="warped">Warped</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-10 offset-1 col-md-6 offset-md-0 text-white mb-4">
                <div class="card bg-dark border border-white h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-warning fw-bolder tektur-font mb-0">Minecraft Counter</h5>
                        <model-viewer id="counter-model"
                                      alt="counter model"
                                      src="/models/Counter.glb"
                                      cors-mode="anonymous"
                                      auto-rotate
                                      camera-controls
                                      shadow-intensity="1"
                                      environment-image="neutral"
                                      camera-orbit="180deg 75deg 105%"
                                      material-variant="oak"
                                      exposure="0.8"
                                      style="width: 100%; height: 200px; background-color: #212529;">
                        </model-viewer>
                        <p>This is the counter top I made for my minecraft furniture mod, it uses two textures, one which is entirely in gray scale so that I can overlay a color over it for each of the 10 minecraft wood types</p>
                        <div class="mb-2 mt-auto">
                            <label for="counter-model-color" class="form-label">Wood Type:</label>
                            <select id="counter-model-color" class="form-select bg-dark text-white">
                                <option value="acacia">Acacia</option>
                                <option value="birch">Birch</option>
                                <option value="cherry">Cherry</option>
                                <option value="crimson">Crimson</option>
                                <option value="dark_oak">Dark Oak</option>
                                <option value="jungle">Jungle</option>
                                <option value="mangrove">Mangrove</option>
                                <option value="oak">Oak</option>
                                <option value="spruce">Spruce</option>
                                <option value="warped">Warped</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>

        const modelColorConfigs = {
            'sink-model': {
                materialIndex: 0,
                colors: {
                    acacia: '#b05c34',
                    birch: '#d4c484',
                    cherry: '#dc9c94',
                    crimson: '#843c5c',
                    dark_oak: '#4c341c',
                    jungle: '#b8885c',
                    mangrove: '#8c4c3c',
                    oak: '#c49c64',
                    spruce: '#7c5c34',
                    warped: '#3c8c8c'
                },
                defaultColor: 'acacia',
                darkenFactor: 0.4
            },
            'counter-model': {
                materialIndex: 0,
                colors: {
                    acacia: '#b05c34',
                    birch: '#d4c484',
                    cherry: '#dc9c94',
                    crimson: '#843c5c',
                    dark_oak: '#4c341c',
                    jungle: '#b8885c',
                    mangrove: '#8c4c3c',
                    oak: '#c49c64',
                    spruce: '#7c5c34',
                    warped: '#3c8c8c'
                },
                defaultColor: 'acacia',
                darkenFactor: 0.4
            }
        }

        const currentColorSelections = {};

        function applyModelColor(modelId, colorName){
            const modelViewer = (document.getElementById(modelId));
            const config = modelColorConfigs[modelId];

            if (!config || ! modelViewer || !modelViewer.model){
                return;
            }

            currentColorSelections[modelId] = colorName;

            const dropdownId = `${modelId}-color`;
            const dropdown = document.getElementById(dropdownId);
            if (dropdown){
                dropdown.value = colorName;
            }

            try {
                const hexColor = config.colors[colorName];
                if (!hexColor) return;

                // Convert hex to RGB components (0-1 scale)
                const r = parseInt(hexColor.slice(1, 3), 16) / 255;
                const g = parseInt(hexColor.slice(3, 5), 16) / 255;
                const b = parseInt(hexColor.slice(5, 7), 16) / 255;

                // Apply darkness factor if specified
                const darkenFactor = config.darkenFactor || 1.0;
                const adjustedR = r * darkenFactor;
                const adjustedG = g * darkenFactor;
                const adjustedB = b * darkenFactor;

                // Apply to the specified material
                const material = modelViewer.model.materials[config.materialIndex];
                if (material && material.pbrMetallicRoughness) {
                    material.pbrMetallicRoughness.setBaseColorFactor([adjustedR, adjustedG, adjustedB, 1.0]);
                    console.log(`Color ${colorName} applied to ${modelId}`);
                }
            } catch (e) {
                console.error(`Error applying color to ${modelId}:`, e);
            }
        }

        function switchModel(modelId, modelPath) {

            const modelViewer = document.querySelector(`#${modelId}`);
            const oldPath = modelViewer.src;

            if (oldPath !== modelPath){
                modelViewer.src = modelPath;
                modelViewer.cameraOrbit = "180deg 75deg 105%";

                if (modelColorConfigs[modelId]){
                    const colorToApply = currentColorSelections[modelId] || modelColorConfigs[modelId].defaultColor;

                    modelViewer.addEventListener('load', () => {
                        setTimeout(() => {
                            applyModelColor(modelId, colorToApply);
                        }, 500);
                    }, { once: true });
                }
            }
        }
        document.addEventListener('DOMContentLoaded', function() {

            Object.keys(modelColorConfigs).forEach(modelId => {

                const modelViewer = document.getElementById(modelId);
                const config = modelColorConfigs[modelId];

                if (modelViewer) {

                    currentColorSelections[modelId] = config.defaultColor;

                    const dropdownId = `${modelId}-color`;
                    const dropdown = document.getElementById(dropdownId);

                    if (dropdown) {

                        dropdown.value = config.defaultColor;

                        dropdown.addEventListener('change', function() {
                            applyModelColor(modelId, this.value);
                        });
                    }

                    modelViewer.addEventListener('load', () => {
                        setTimeout(() => {
                            applyModelColor(modelId, config.defaultColor);
                        }, 500);
                    }, { once: true });
                }
            });
            const truckModelDropdown = document.getElementById('truck-model-type');
            if (truckModelDropdown) {
                truckModelDropdown.addEventListener('change', function() {
                    const selectedTruck = this.value;
                    switchModel('truck-model', `/models/${selectedTruck}.glb`);
                });
            }
        })
    </script>
</div>