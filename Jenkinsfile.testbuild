pipeline {
    agent any
    triggers {
        githubPush() 
    }
    environment {
        DOCKER_REGISTRY = 'localhost'
        TEST_CONTAINER_NAME = 'portfolio-test'
        TEST_PORT = '5001'
    }
    stages {
        stage('Detect PR Merge to Test') {
            steps {
                script {
                    // Existing PR merge detection logic
                    sh "git checkout test"
                    
                    def commitMsg = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    echo "Commit message: ${commitMsg}"
                    
                    if (!commitMsg.contains("Merge pull request")) {
                        echo "This is not a PR merge commit. Skipping build process."
                        currentBuild.result = 'ABORTED'
                        error("Build stopped: Not a PR merge commit")
                        return
                    }
                    
                    def sourceBranch = "unknown"
                    
                    if (commitMsg.contains("from ")) {
                        def afterFrom = commitMsg.substring(commitMsg.indexOf("from ") + 5)
                        def branchFullPath = afterFrom.split()[0]
                        sourceBranch = branchFullPath.contains("/") ? 
                            branchFullPath.substring(branchFullPath.lastIndexOf("/") + 1) : 
                            branchFullPath
                    }
                    
                    echo "Detected source branch: ${sourceBranch}"
                    echo "Target branch: test"
                    
                    env.SOURCE_BRANCH = sourceBranch
                }
            }
        }
        
        stage('Notify Discord of Test Build Process') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'discord-build-status', variable: 'DISCORD_BUILD_STATUS')]) {
                        def timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
                        
                        def color = '5793266'
                        def safeSourceBranch = env.SOURCE_BRANCH.replace("'", "\\'")
                        
                        def discordMessage = """
                        {
                            "username": "Jenkins",
                            "avatar_url": "https://www.jenkins.io/images/logos/jenkins/jenkins.png",
                            "embeds": [{
                                "title": "Test Build Process Started",
                                "description": "Branch **${safeSourceBranch}** merged into Branch **test** beginning build process for test environment",
                                "color": ${color},
                                "fields": [
                                    {
                                        "name": "Source Branch",
                                        "value": "${safeSourceBranch}"
                                    },
                                    {
                                        "name": "Target Branch",
                                        "value": "test"
                                    }
                                ],
                                "footer": {
                                    "text": "Jenkins CI/CD Notification"
                                },
                                "timestamp": "${timestamp}"
                            }]
                        }
                        """
                        
                        writeFile file: 'discord_payload.json', text: discordMessage
                        
                        sh '''
                            curl -X POST "${DISCORD_BUILD_STATUS}" \\
                            -H "Content-Type: application/json" \\
                            -d @discord_payload.json
                        '''
                        
                        echo "Discord notification sent for test environment build"
                    }
                }
            }
        }
        
        stage('Build .NET MVC Test Project') {
            steps {
                script {
                    echo "Starting build process for TEST environment..."
                    
                    sh '''
                        dotnet restore
                        dotnet clean
                        dotnet build --configuration Release
                        dotnet publish ./ConorMcQuillanPortfolio/ConorMcQuillanPortfolio.csproj --configuration Release --output ./publish
                    '''
                    
                    echo "Build completed successfully. Ready to create Docker image."
                }
            }
        }
        
        stage('Create and Deploy Docker Image'){
            steps {
                script{
                    echo "Creating Docker image for test environment"

                    withCredentials([
                        string(credentialsId: 'discord-inbox-url', variable: 'DISCORD_PORTFOLIO_INBOX_URL'),
                        string(credentialsId: 'github-repo-access', variable: 'GITHUB_REPO_ACCESS')
                    ]) {
                        sh '''
                        # Build the Docker image with explicit Dockerfile path
                        docker build -t ''' + env.DOCKER_REGISTRY + '''/portfolio:test -f ./ConorMcQuillanPortfolio/Dockerfile ./publish
                        
                        # Stop any existing container
                        docker stop ''' + env.TEST_CONTAINER_NAME + ''' || true
                        docker rm ''' + env.TEST_CONTAINER_NAME + ''' || true
                        
                        # Run the new container
                        docker run -d --name ''' + env.TEST_CONTAINER_NAME + ''' \
                            -p ''' + env.TEST_PORT + ''':80 \
                            -e ASPNETCORE_ENVIRONMENT=Staging \
                            -e DISCORD_PORTFOLIO_INBOX_URL="''' + DISCORD_PORTFOLIO_INBOX_URL + '''" \
                            -e GITHUB_REPO_ACCESS="''' + GITHUB_REPO_ACCESS + '''" \
                            ''' + env.DOCKER_REGISTRY + '''/portfolio:test
                        '''
                    }
                    
                    echo "Docker container for test environment is now running."
                }
            }
        }
    }
    
    post {
        success {
            script {
                withCredentials([string(credentialsId: 'discord-build-status', variable: 'DISCORD_BUILD_STATUS')]) {
                    def timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
                    
                    // Green color for success
                    def color = '3066993'
                    
                    def successMessage = """
                    {
                        "username": "Jenkins",
                        "avatar_url": "https://www.jenkins.io/images/logos/jenkins/jenkins.png",
                        "embeds": [{
                            "title": "Test Build Process Successful",
                            "description": "Branch **${env.SOURCE_BRANCH}** successfully merged into **test** and deployed",
                            "color": ${color},
                            "fields": [
                                {
                                    "name": "Source Branch",
                                    "value": "${env.SOURCE_BRANCH}"
                                },
                                {
                                    "name": "Status",
                                    "value": "✅ Deployment Completed"
                                }
                            ],
                            "footer": {
                                "text": "Jenkins CI/CD Notification"
                            },
                            "timestamp": "${timestamp}"
                        }]
                    }
                    """
                    
                    writeFile file: 'discord_success_payload.json', text: successMessage
                    
                    sh '''
                        curl -X POST "${DISCORD_BUILD_STATUS}" \\
                        -H "Content-Type: application/json" \\
                        -d @discord_success_payload.json
                    '''
                }
            }
        }
        
        failure {
            script {
                withCredentials([string(credentialsId: 'discord-build-status', variable: 'DISCORD_BUILD_STATUS')]) {
                    def timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
                    
                    // Red color for failure
                    def color = '15158332'
                    
                    def failureMessage = """
                    {
                        "username": "Jenkins",
                        "avatar_url": "https://www.jenkins.io/images/logos/jenkins/jenkins.png",
                        "embeds": [{
                            "title": "Test Build Process Failed ❌",
                            "description": "Build failed for branch **${env.SOURCE_BRANCH}** merged into **test**",
                            "color": ${color},
                            "fields": [
                                {
                                    "name": "Source Branch",
                                    "value": "${env.SOURCE_BRANCH}"
                                },
                                {
                                    "name": "Status",
                                    "value": "❌ Deployment Failed"
                                },
                                {
                                    "name": "Console Output",
                                    "value": "[View Full Build Log](${BUILD_URL}console)"
                                }
                            ],
                            "footer": {
                                "text": "Full build log available in Jenkins",
                                "icon_url": "https://www.jenkins.io/images/logos/jenkins/jenkins.png"
                            },
                            "timestamp": "${timestamp}"
                        }]
                    }
                    """
                    
                    writeFile file: 'discord_failure_payload.json', text: failureMessage
                    
                    sh '''
                        curl -X POST "${DISCORD_BUILD_STATUS}" \\
                        -H "Content-Type: application/json" \\
                        -d @discord_failure_payload.json
                    '''
                }
            }
        }
        
        always {
            echo "Cleaning workspace..."
            cleanWs() 
        }
    }
}